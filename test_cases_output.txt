----->CASE 1

    for(k=0;k<5;k++) {
        A[0][k] = alpha * A[0][k];
        B[0][k] = alpha;
    }


Predicted
{0: 11, 1: 21, 2: 14, -1: 13}

Actual
{0: 11, 1: 21, 2: 14, -1: 13}


----->TEST CASE PASSED


----->CASE 2

    for(k=0;k<300;k++) {
        A[0][k] = alpha * A[0][k];
        B[0][k] = alpha;
    }

Predicted
{0: 601, 1: 1201, 2: 899, -1: 603}

Actual
{0: 601, 1: 1201, 2: 899, -1: 603}

----->TEST CASE PASSED


----->CASE 2

    for(k=0;k<300;k++) {
        A[0][k] = alpha * A[0][k];
        B[0][k] = alpha;
    }

Predicted
{0: 601, 1: 1201, 2: 899, -1: 603}

Actual
{0: 601, 1: 1201, 2: 899, -1: 603}

----->TEST CASE PASSED


----->CASE 3

    for(j=0;j<2;j++){
        for(k=0;k<300;k++) {
            A[0][k] = alpha * A[0][k];
            B[j][k] = alpha;
        }
    }

Predicted
{0: 1207, 1: 2401, 2: 603, 3: 1201, 4: 598, 602: 300, -1: 904}

Actual
{0: 1207, 1: 2401, 2: 603, 3: 1201, 4: 598, 602: 300, -1: 904}

----->TEST CASE PASSED


----->CASE 4

    for(j=0;j<200;j++){
        for(k=0;k<300;k++) {
            A[0][k] = alpha * A[0][k];
            B[j][k] = alpha;
        }
    }

Predicted
{0: 120601, 1: 240199, 2: 60201, 3: 120199, 4: 59800, 602: 59700, -1: 60304}

Actual
{0: 120601, 1: 240199, 2: 60201, 3: 120199, 4: 59800, 602: 59700, -1: 60304}

----->TEST CASE PASSED


----->CASE 5

    for(i=0;i<300;i++){
        for(j=0;j<200;j++){
            for(k=0;k<102;k++) {
                A[i][k] = alpha * A[i][k];
                B[j][k] = alpha;
            }
        }
    }

Predicted
{0: 12420901, 1: 6179999, 2: 24540299, 3: 18360001, 4: 60299, 5: 12180000, 207: 6089400, 20505: 299, 20506: 598, 20507: 598, 20508: 598, 20509: 598, 20510: 598, 20511: 598, 20512: 598, 20513: 598, 20514: 598, 20515: 598, 20516: 598, 20517: 598, 20518: 598, 20519: 598, 20520: 598, 20521: 598, 20522: 598, 20523: 598, 20524: 598, 20525: 598, 20526: 598, 20527: 598, 20528: 598, 20529: 598, 20530: 598, 20531: 598, 20532: 598, 20533: 598, 20534: 598, 20535: 598, 20536: 598, 20537: 598, 20538: 598, 20539: 598, 20540: 598, 20541: 598, 20542: 598, 20543: 598, 20544: 598, 20545: 598, 20546: 598, 20547: 598, 20548: 598, 20549: 598, 20550: 598, 20551: 598, 20552: 598, 20553: 598, 20554: 598, 20555: 598, 20556: 598, 20557: 598, 20558: 598, 20559: 598, 20560: 598, 20561: 598, 20562: 598, 20563: 598, 20564: 598, 20565: 598, 20566: 598, 20567: 598, 20568: 598, 20569: 598, 20570: 598, 20571: 598, 20572: 598, 20573: 598, 20574: 598, 20575: 598, 20576: 598, 20577: 598, 20578: 598, 20579: 598, 20580: 598, 20581: 598, 20582: 598, 20583: 598, 20584: 598, 20585: 598, 20586: 598, 20587: 598, 20588: 598, 20589: 598, 20590: 598, 20591: 598, 20592: 598, 20593: 598, 20594: 598, 20595: 598, 20596: 598, 20597: 598, 20598: 598, 20599: 598, 20600: 598, 20601: 598, 20602: 598, 20603: 598, 20604: 598, 20605: 598, 20606: 598, 20607: 6038903, -1: 51005}

Actual
{0: 12420901, 1: 6179999, 2: 24540299, 3: 18360001, 4: 60299, 5: 12180000, 207: 6089400, 20505: 299, 20506: 598, 20507: 598, 20508: 598, 20509: 598, 20510: 598, 20511: 598, 20512: 598, 20513: 598, 20514: 598, 20515: 598, 20516: 598, 20517: 598, 20518: 598, 20519: 598, 20520: 598, 20521: 598, 20522: 598, 20523: 598, 20524: 598, 20525: 598, 20526: 598, 20527: 598, 20528: 598, 20529: 598, 20530: 598, 20531: 598, 20532: 598, 20533: 598, 20534: 598, 20535: 598, 20536: 598, 20537: 598, 20538: 598, 20539: 598, 20540: 598, 20541: 598, 20542: 598, 20543: 598, 20544: 598, 20545: 598, 20546: 598, 20547: 598, 20548: 598, 20549: 598, 20550: 598, 20551: 598, 20552: 598, 20553: 598, 20554: 598, 20555: 598, 20556: 598, 20557: 598, 20558: 598, 20559: 598, 20560: 598, 20561: 598, 20562: 598, 20563: 598, 20564: 598, 20565: 598, 20566: 598, 20567: 598, 20568: 598, 20569: 598, 20570: 598, 20571: 598, 20572: 598, 20573: 598, 20574: 598, 20575: 598, 20576: 598, 20577: 598, 20578: 598, 20579: 598, 20580: 598, 20581: 598, 20582: 598, 20583: 598, 20584: 598, 20585: 598, 20586: 598, 20587: 598, 20588: 598, 20589: 598, 20590: 598, 20591: 598, 20592: 598, 20593: 598, 20594: 598, 20595: 598, 20596: 598, 20597: 598, 20598: 598, 20599: 598, 20600: 598, 20601: 598, 20602: 598, 20603: 598, 20604: 598, 20605: 598, 20606: 598, 20607: 6038903, -1: 51005}

----->TEST CASE PASSED


----->CASE 6
----->STANDARD DIALATION PROBLEM

    for(i=0;i<2;i++){
        for(j=0;j<2,3...200;j++){
            for(k=0;k<102;k++) {
                A[i][k] = alpha * A[i][k];
                B[j][k] = alpha;
            }
        }
    }

Predicted
{0: 82807, 1: 41199, 2: 163601, 3: 122401, 4: 401, 5: 81200, 207: 40596, 20505: 1, 20506: 2, 20507: 2, 20508: 2, 20509: 2, 20510: 2, 20511: 2, 20512: 2, 20513: 2, 20514: 2, 20515: 2, 20516: 2, 20517: 2, 20518: 2, 20519: 2, 20520: 2, 20521: 2, 20522: 2, 20523: 2, 20524: 2, 20525: 2, 20526: 2, 20527: 2, 20528: 2, 20529: 2, 20530: 2, 20531: 2, 20532: 2, 20533: 2, 20534: 2, 20535: 2, 20536: 2, 20537: 2, 20538: 2, 20539: 2, 20540: 2, 20541: 2, 20542: 2, 20543: 2, 20544: 2, 20545: 2, 20546: 2, 20547: 2, 20548: 2, 20549: 2, 20550: 2, 20551: 2, 20552: 2, 20553: 2, 20554: 2, 20555: 2, 20556: 2, 20557: 2, 20558: 2, 20559: 2, 20560: 2, 20561: 2, 20562: 2, 20563: 2, 20564: 2, 20565: 2, 20566: 2, 20567: 2, 20568: 2, 20569: 2, 20570: 2, 20571: 2, 20572: 2, 20573: 2, 20574: 2, 20575: 2, 20576: 2, 20577: 2, 20578: 2, 20579: 2, 20580: 2, 20581: 2, 20582: 2, 20583: 2, 20584: 2, 20585: 2, 20586: 2, 20587: 2, 20588: 2, 20589: 2, 20590: 2, 20591: 2, 20592: 2, 20593: 2, 20594: 2, 20595: 2, 20596: 2, 20597: 2, 20598: 2, 20599: 2, 20600: 2, 20601: 2, 20602: 2, 20603: 2, 20604: 2, 20605: 2, 20606: 2, 20607: 20197, -1: 20609}

Actual
{0: 82807, 1: 41199, 2: 163601, 3: 122401, 4: 401, 5: 81200, 207: 40596, 20505: 1, 20506: 2, 20507: 2, 20508: 2, 20509: 2, 20510: 2, 20511: 2, 20512: 2, 20513: 2, 20514: 2, 20515: 2, 20516: 2, 20517: 2, 20518: 2, 20519: 2, 20520: 2, 20521: 2, 20522: 2, 20523: 2, 20524: 2, 20525: 2, 20526: 2, 20527: 2, 20528: 2, 20529: 2, 20530: 2, 20531: 2, 20532: 2, 20533: 2, 20534: 2, 20535: 2, 20536: 2, 20537: 2, 20538: 2, 20539: 2, 20540: 2, 20541: 2, 20542: 2, 20543: 2, 20544: 2, 20545: 2, 20546: 2, 20547: 2, 20548: 2, 20549: 2, 20550: 2, 20551: 2, 20552: 2, 20553: 2, 20554: 2, 20555: 2, 20556: 2, 20557: 2, 20558: 2, 20559: 2, 20560: 2, 20561: 2, 20562: 2, 20563: 2, 20564: 2, 20565: 2, 20566: 2, 20567: 2, 20568: 2, 20569: 2, 20570: 2, 20571: 2, 20572: 2, 20573: 2, 20574: 2, 20575: 2, 20576: 2, 20577: 2, 20578: 2, 20579: 2, 20580: 2, 20581: 2, 20582: 2, 20583: 2, 20584: 2, 20585: 2, 20586: 2, 20587: 2, 20588: 2, 20589: 2, 20590: 2, 20591: 2, 20592: 2, 20593: 2, 20594: 2, 20595: 2, 20596: 2, 20597: 2, 20598: 2, 20599: 2, 20600: 2, 20601: 2, 20602: 2, 20603: 2, 20604: 2, 20605: 2, 20606: 2, 20607: 20197, -1: 20609}

----->TEST CASE PASSED


----->CASE 7
----->Polybench: 2mm : test 1

    int i,j,k, A[1000][1000],B[1000][1000];
    int ni=1000, nk=700;

    for (i = 0; i < ni; i++)
        for (j = 0; j < nk; j++)
        A[i][j] = (i*j) / ni;

Predicted
{0: 1403001, 1: 700000, 2: 2100001, 3: 703999, 4: 1400000, -1: 700005}

Actual
{0: 1403001, 1: 700000, 2: 2100001, 3: 703999, 4: 1400000, -1: 700005}

----->TEST CASE PASSED


----->CASE 8
----->Polybench: 2mm : test 2: additive operation added inside most inner

    int i,j,k, D[6000][3000];
    int ni=6000, nl=300;

    for (i = 0; i < ni; i++)
        for (j = 0; j < nl; j++)
        D[i][j] = ((DATA_TYPE) i*(j+2)) / nk;

Predicted
{0: 3618001, 1: 1800000, 2: 5400001, 3: 1817999, 4: 3594001, 5: 5999, 304: 6000, -1: 1800006}

Actual
{0: 3618001, 1: 1800000, 2: 5400001, 3: 1817999, 4: 3594001, 5: 5999, 304: 6000, -1: 1800006}

----->TEST CASE PASSED

